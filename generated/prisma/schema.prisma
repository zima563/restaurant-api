// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  phone        String
  password     String
  role         Role           @default(USER)
  addresses    Address[]
  cartItems    CartItem[]
  orders       Order[]
  reviews      Review[]
  createdAt    DateTime       @default(now())
  Notification Notification[]
}

model Address {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  city      String
  street    String
  building  String
  floor     String
  apartment String
  note      String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  Order     Order[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  imageUrl  String?
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String?
  isAvailable Boolean     @default(true)
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime    @default(now())
}

model CartItem {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Order {
  id              Int              @id @default(autoincrement())
  merchantOrderId String?          @unique
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  address         Address          @relation(fields: [addressId], references: [id])
  addressId       Int
  status          OrderStatus      @default(PENDING)
  totalPrice      Float
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus    @default(UNPAID)
  paymobOrderId   Int?
  orderItems      OrderItem[]
  createdAt       DateTime         @default(now())
  OrderStatusLog  OrderStatusLog[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  unitPrice Float
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model OrderStatusLog {
  id        Int         @id @default(autoincrement())
  order     Order       @relation(fields: [orderId], references: [id])
  orderId   Int
  status    OrderStatus
  note      String?
  createdAt DateTime    @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  body      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PREPARING
  ON_THE_WAY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  WALLET
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
  REFUNDED
}
